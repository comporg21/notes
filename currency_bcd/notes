https://en.wikipedia.org/wiki/EBCDIC


The ASCII equivalent of 42 is asterisk.  The asterisk is used in computing to represent 'anything'. So the answer to life, the universe and everything is anything ;)


In computing, floating-point arithmetic (FP) is arithmetic using formulaic representation of real numbers as an approximation so as to support a trade-off between range and precision.

https://en.wikipedia.org/wiki/Floating-point_arithmetic

https://en.wikipedia.org/wiki/Floating-point_arithmetic#Accuracy_problems

0.101 (binary) is 2^-1 + 2^-3 = 0.5 + 0.125 = 0.625

0.1 (decimal) is 0.00011001100110011001100... (binary)


____________________________________________________

All floating point values that can represent a currency amount (in dollars and cents) cannot be stored exactly as it is in the memory. So, if we want to store 0.1 dollars (10 cents), float/double can not store it as it is. Instead, the binary can store only a closer approximation value (0.100000001490116119384765625 in decimal). The magnitude of this problem becomes significant (known as loss of significance) when we repetitively do arithmetic operations (multiply or divide) using these two data types. Below, we will demonstrate what this may look like.

>Whether or not a rational number has a terminating expansion depends on the base. For example, in base-10, the number 1/2 has a terminating expansion (0.5) while the number 1/3 does not (0.333…). In base-2 only rationals with denominators that are powers of 2 (such as 1/2 or 3/16) are terminating. Any rational with a denominator that has a prime factor other than 2 will have an infinite binary expansion. This means that numbers which appear to be short and exact when written in decimal format may need to be approximated when converted to binary floating-point. For example, the decimal number 0.1 is not representable in binary floating-point of any finite precision; the exact binary representation would have a "1100" sequence continuing endlessly:

https://en.wikipedia.org/wiki/Floating-point_arithmetic


 Using Float, Double Instead of BigDecimal Could Be Fatal for Military

On February 25, 1991, a loss of significance in a MIM-104 Patriot missile battery prevented it from intercepting an incoming Scud missile in Dhahran, Saudi Arabia, contributing to the death of 28 soldiers from the U.S. Army’s 14th Quartermaster Detachment.

https://www.gao.gov/products/imtec-92-26
https://www.gao.gov/assets/imtec-92-26.pdf


https://dzone.com/articles/never-use-float-and-double-for-monetary-calculatio


42

101010 (binary) = 42 (decimal)

BCD

0100    0010

4         2


ASCII


0110100   0110010


echo "ibase=2;0110100" | bc -l



algorithm:


binary source:  1010 (10 in decimal)
desired rusilt: 0001 0000
double dabble.

double means shifting.


0000   0000      1010
0000   0001      010
0000   0010      10
0000   0101      0

now 101 is => 5; therefore add 3 (011)
      
       0101
     + 0011
     ______
      10000

0001   0000

desired result. (:


http://www.eprg.org/computerphile/fortytwo.pdf

http://www.eprg.org/computerphile/doubledabble.pdf


_______________________________

42 is 101010

tens  units   binary

0000  0000    101010
0000  0001    01010     shift 1
0000  0010    1010      shift 2
0000  0101    010       shift 3
0000  1000    010       add 3 to units
0001  0000    10        shift 4
0010  0001    0         shift 5
0100  0010             


_________________________________

Let's say you have value 0x37 in BL, and you want to extract it into BH (0x03) and BL (0x07), then for example this code will calculate that:

mov bh, bl   ; copy the packed value also into BH
and bl, 0x0F ; keep only lower 4 bits in BL (0x37 & 0x0F = 0x07)
shr bh, 4    ; shift right by 4 bits BH (unsigned(0x37) >> 4 = 0x03)
; and that's it, it's that simple to manipulate bits in assembly


https://stackoverflow.com/questions/46133768/how-to-convert-from-bcd-to-ascii-and-print-the-result



https://www.youtube.com/watch?v=eXIfZ1yKFlA
https://www.youtube.com/watch?v=RDoYo3yOL_E

https://medium.com/@cancerian0684/which-data-type-would-you-choose-for-storing-currency-values-like-trading-price-dd7489e7a439
https://eevibes.com/pic16f4550-microcontroller/how-to-perform-packed-bcd-to-ascii-conversion/
